{-# OPTIONS --without-K --exact-split --cubical #-}

-- This is unfortunate, but Arch doesn't have the cubical stuff
-- in the stdlib package it comes with (and cabal on Arch is
-- significantly worse).
open import Agda.Builtin.Cubical.Id
open import Agda.Builtin.Cubical.Path

-- Other builtins
open import Agda.Builtin.List
open import Agda.Builtin.Bool

open import Axiom.Extensionality.Propositional

-- I understand it better calling stuff "UU" from Egbert's notes.
open import 00-preamble
-- Same for + types -- too lazy to find the builtin
open import 04-inductive-types

-- https://dl.acm.org/doi/pdf/10.1145/3341691 page 11
-- set quotient (truncate the quotient)
-- ‚â° is from Agda.Builtin.Id
data Quot {i : Level} (A : UU i) (R : A ‚Üí A ‚Üí UU i): UU i where
  cls : A ‚Üí Quot A R
  eq : (a b : A) ‚Üí (r : R a b) ‚Üí (cls a) ‚â° (cls b)
  trunc : (x y : Quot A R) ‚Üí (p q : x ‚â° y) ‚Üí p ‚â° q

-- First definition of a group: List(A + A) / R. Some oddity:
-- 1) f : A ‚Üí A ‚Üí Bool is an equality predicate (Eq in Haskell), but I'm not sure how to
--    insist that (f a‚ÇÅ a‚ÇÇ = true) ‚âÖ (a‚ÇÅ = a‚ÇÇ) or just say "if the identity type is
--    inhabited." Also encode-decode seems to use information from the type, so defining
--    f should be a reasonable requirement (it's just code, but using true for ùüô and false
--    for ùüò).
-- 2) I promise it terminates. Otherwise it insists that the first recursive call is
--    uncertain but the list is clearly one element shorter.
-- 3) I think the warning isn't all that important (but I'm a programmer, don't trust me).
--    My understanding is that the warning means "the definitional equalities Agda has can
--    be surprising" but I don't see how it's bad yet.
{-# TERMINATING #-}
cancelList : {i : Level} {A : UU i} (eq : A ‚Üí A ‚Üí Bool) (l : List (coprod A A)) ‚Üí List (coprod A A)
cancelList e [] = []
cancelList e ((inl a‚ÇÅ) ‚à∑ (inr a‚ÇÇ) ‚à∑ xs) with e a‚ÇÅ a‚ÇÇ
...                                      | true = cancelList e xs
...                                      | false = (inl a‚ÇÅ) ‚à∑ (cancelList e ((inr a‚ÇÇ) ‚à∑ xs))
cancelList e ((inr a‚ÇÅ) ‚à∑ (inl a‚ÇÇ) ‚à∑ xs) with e a‚ÇÅ a‚ÇÇ
...                                      | true = cancelList e xs
...                                      | false = (inr a‚ÇÅ) ‚à∑ (cancelList e ((inl a‚ÇÇ) ‚à∑ xs))
cancelList e (x ‚à∑ xs) = x ‚à∑ (cancelList e xs)

-- Proof that cancel list is idempotent (done on sets bc why the #$%^ does the built-in
-- funext need a #$%^ing level as an explicit param?)
-- Note that oddity 1 from above is relevant -- I'm just going to be lazy and prove for all
-- equality-like things.
cancelList-idempotent : {A : UU (lsuc lzero)} (e : A ‚Üí A ‚Üí Bool)
                        ‚Üí ((Œª x ‚Üí cancelList e (cancelList e x)) ‚â° (cancelList e))
cancelList-idempotent e = 
